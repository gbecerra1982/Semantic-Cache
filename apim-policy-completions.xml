<policies>
    <inbound>
        <base />
        
        <!-- Extraer y validar el request body -->
        <set-variable name="requestBody" value="@(context.Request.Body.As<JObject>(preserveContent: true))" />
        <!-- Extraer parámetros específicos de completions -->
        <set-variable name="temperature" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;temperature&quot;]?.Value<float>()?? 0.7f;
        }" />
        <set-variable name="max-tokens" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;max_tokens&quot;]?.Value<int>() ?? 800;
        }" />
        <set-variable name="model" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;model&quot;]?.ToString() ?? &quot;gpt-4&quot;;
        }" />
        <set-variable name="user" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;user&quot;]?.ToString() ?? &quot;anonymous&quot;;
        }" />
        <set-variable name="top-p" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;top_p&quot;]?.Value<float>() ?? 1.0f;
        }" />
        <set-variable name="frequency-penalty" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;frequency_penalty&quot;]?.Value<float>() ?? 0.0f;
        }" />
        <set-variable name="presence-penalty" value="@{
            var body = (JObject)context.Variables[&quot;requestBody&quot;];
            return body[&quot;presence_penalty&quot;]?.Value<float>() ?? 0.0f;
        }" />
        <!-- Determinar el grupo de temperatura para optimización de caché -->
        <set-variable name="temperature-group" value="@{
            var temp = (float)context.Variables[&quot;temperature&quot;];
            if (temp <= 0.2) { return &quot;deterministic&quot;; }
            else if (temp <= 0.5) { return &quot;low&quot;; }
            else if (temp <= 0.8) { return &quot;medium&quot;; }
            else { return &quot;high&quot;; }
        }" />
        <!-- Caché Semántico Optimizado para Completions -->
        <!-- score-threshold: 0.10 para permitir respuestas similares pero no idénticas -->
        <azure-openai-semantic-cache-lookup score-threshold="0.10" embeddings-backend-id="text-embedding" embeddings-backend-auth="system-assigned" max-message-count="20" ignore-system-messages="false">
            <!-- Particionamiento principal por suscripción -->
            <vary-by>@(context.Subscription?.Id ?? &quot;public&quot;)</vary-by>
            <!-- Particionamiento por modelo -->
            <vary-by>@(context.Variables.GetValueOrDefault(&quot;model&quot;, &quot;gpt-4&quot;))</vary-by>
            <!-- Particionamiento por grupo de temperatura -->
            <vary-by>@(context.Variables.GetValueOrDefault(&quot;temperature-group&quot;, &quot;medium&quot;))</vary-by>
            <!-- Particionamiento por rango de tokens -->
            <vary-by>@{
                var maxTokens = (int)context.Variables[&quot;max-tokens&quot;];
                if (maxTokens <= 256) { return &quot;tokens-small&quot;; }
                else if (maxTokens <= 1024) { return &quot;tokens-medium&quot;; }
                else if (maxTokens <= 2048) { return &quot;tokens-large&quot;; }
                else { return &quot;tokens-xlarge&quot;; }
            }</vary-by>
            <!-- Particionamiento por usuario (si se proporciona) -->
            <vary-by>@(context.Variables.GetValueOrDefault(&quot;user&quot;, &quot;anonymous&quot;))</vary-by>
            <!-- Particionamiento por parámetros de penalización -->
            <vary-by>@{
                var freqPenalty = (float)context.Variables[&quot;frequency-penalty&quot;];
                var presPenalty = (float)context.Variables[&quot;presence-penalty&quot;];
                
                // Agrupar penalizaciones en categorías
                string freqGroup = &quot;none&quot;;
                string presGroup = &quot;none&quot;;
                
                if (freqPenalty != 0) {
                    if (freqPenalty < 0.5) { freqGroup = &quot;low&quot;; }
                    else { freqGroup = &quot;high&quot;; }
                }
                
                if (presPenalty != 0) {
                    if (presPenalty < 0.5) { presGroup = &quot;low&quot;; }
                    else { presGroup = &quot;high&quot;; }
                }
                
                return $&quot;freq:{freqGroup}|pres:{presGroup}&quot;;
            }</vary-by>
            <!-- Hash del system message si existe -->
            <vary-by>@{
                var body = (JObject)context.Variables[&quot;requestBody&quot;];
                var messages = body[&quot;messages&quot;] as JArray;
                
                if (messages != null &amp;&amp; messages.Count > 0) {
                    var systemMessage = messages.FirstOrDefault(m => m[&quot;role&quot;]?.ToString() == &quot;system&quot;);
                    if (systemMessage != null) {
                        var content = systemMessage[&quot;content&quot;]?.ToString() ?? &quot;&quot;;
                        return $&quot;system:{content.GetHashCode()}&quot;;
                    }
                }
                return &quot;no-system&quot;;
            }</vary-by>
            <!-- Funciones o herramientas si están presentes -->
            <vary-by>@{
                var body = (JObject)context.Variables[&quot;requestBody&quot;];
                var functions = body[&quot;functions&quot;];
                var tools = body[&quot;tools&quot;];
                
                if (functions != null) {
                    return $&quot;functions:{functions.ToString().GetHashCode()}&quot;;
                } else if (tools != null) {
                    return $&quot;tools:{tools.ToString().GetHashCode()}&quot;;
                }
                return &quot;no-tools&quot;;
            }</vary-by>
        </azure-openai-semantic-cache-lookup>
        <!-- Headers de debugging para completions -->
        <set-header name="X-Completion-Model" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault(&quot;model&quot;, &quot;gpt-4&quot;))</value>
        </set-header>
        <set-header name="X-Temperature" exists-action="override">
            <value>@(Convert.ToString(context.Variables.GetValueOrDefault("temperature", 0.7f)))</value>
        </set-header>
        <set-header name="X-Temperature-Group" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault(&quot;temperature-group&quot;, &quot;medium&quot;))</value>
        </set-header>
        <set-header name="X-Max-Tokens" exists-action="override">
            <value>@(Convert.ToString(context.Variables.GetValueOrDefault(&quot;max-tokens&quot;, 800)))</value>
        </set-header>
        <set-header name="X-User" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault(&quot;user&quot;, &quot;anonymous&quot;))</value>
        </set-header>
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <base />
        
        <!-- Almacenar respuestas exitosas con TTL de 2 horas por defecto -->
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <!-- 2 horas de TTL por defecto para completions -->
                <azure-openai-semantic-cache-store duration="7200" />
            </when>
        </choose>
        <!-- Headers de respuesta para monitoreo de caché -->
        <set-header name="X-Semantic-Cache-Status" exists-action="override">
            <value>@{
                var status = context.Variables.GetValueOrDefault(&quot;semantic-cache-lookup-status&quot;, &quot;none&quot;);
                return status.ToString().ToUpper();
            }</value>
        </set-header>
        <set-header name="X-Semantic-Cache-Score" exists-action="override">
            <value>@{
                var status = context.Variables.GetValueOrDefault(&quot;semantic-cache-lookup-status&quot;, &quot;none&quot;);
                if (status.ToString().ToLower() == &quot;hit&quot;) {
                    var score = context.Variables.GetValueOrDefault(&quot;semantic-cache-lookup-score&quot;, &quot;0&quot;);
                    return score.ToString();
                }
                return &quot;N/A&quot;;
            }</value>
        </set-header>
        <!-- TTL recomendado basado en temperatura -->
        <set-header name="X-Recommended-TTL-Hours" exists-action="override">
            <value>@{
                var temp = (float)context.Variables[&quot;temperature&quot;];
                if (temp <= 0.2) { return &quot;12&quot;; }
                else if (temp <= 0.5) { return &quot;4&quot;; }
                else if (temp <= 0.8) { return &quot;2&quot;; }
                else { return &quot;1&quot;; }
            }</value>
        </set-header>
        <!-- TTL actual aplicado -->
        <set-header name="X-Cache-TTL-Hours" exists-action="override">
            <value>2</value>
        </set-header>
        <!-- Tiempo de respuesta -->
        <set-header name="X-Response-Time-Ms" exists-action="override">
            <value>@(context.Elapsed.TotalMilliseconds.ToString(&quot;F0&quot;))</value>
        </set-header>
        <!-- Información de la clave de caché -->
        <set-header name="X-Cache-Key" exists-action="override">
            <value>@{
                var model = context.Variables.GetValueOrDefault(&quot;model&quot;, &quot;gpt-4&quot;);
                var tempGroup = context.Variables.GetValueOrDefault(&quot;temperature-group&quot;, &quot;medium&quot;);
                var user = context.Variables.GetValueOrDefault(&quot;user&quot;, &quot;anonymous&quot;);
                return $&quot;model:{model}|temp:{tempGroup}|user:{user}&quot;;
            }</value>
        </set-header>
        <!-- Información sobre el contexto de mensajes -->
        <set-header name="X-Message-Count" exists-action="override">
            <value>@{
                var body = (JObject)context.Variables[&quot;requestBody&quot;];
                var messages = body[&quot;messages&quot;] as JArray;
                return messages?.Count.ToString() ?? &quot;0&quot;;
            }</value>
        </set-header>
        <!-- Recomendaciones de optimización -->
        <set-header name="X-Cache-Optimization-Tip" exists-action="override">
            <value>@{
                var status = context.Variables.GetValueOrDefault(&quot;semantic-cache-lookup-status&quot;, &quot;none&quot;);
                var temp = (float)context.Variables[&quot;temperature&quot;];
                var tempGroup = context.Variables.GetValueOrDefault(&quot;temperature-group&quot;, &quot;medium&quot;);
                
                if (status.ToString().ToLower() == &quot;miss&quot;) {
                    if (temp <= 0.2) {
                        return &quot;Low temperature - consider longer TTL for deterministic responses&quot;;
                    } else if (temp > 0.8) {
                        return &quot;High temperature - shorter TTL recommended for creative responses&quot;;
                    }
                    return $&quot;Temperature {temp} ({tempGroup}) - 2hr TTL applied&quot;;
                }
                else if (status.ToString().ToLower() == &quot;hit&quot;) {
                    var score = context.Variables.GetValueOrDefault(&quot;semantic-cache-lookup-score&quot;, &quot;0&quot;);
                    return $&quot;Cache hit with score {score} - Token usage saved&quot;;
                }
                
                return &quot;Use consistent temperature values for better cache hits&quot;;
            }</value>
        </set-header>
        <!-- Información adicional sobre el modelo y configuración -->
        <set-header name="X-Completion-Info" exists-action="override">
            <value>@{
                var model = context.Variables.GetValueOrDefault(&quot;model&quot;, &quot;gpt-4&quot;);
                var temp = context.Variables.GetValueOrDefault(&quot;temperature&quot;, 0.7f);
                var maxTokens = context.Variables.GetValueOrDefault(&quot;max-tokens&quot;, 800);
                return $&quot;Model: {model}, Temp: {temp}, MaxTokens: {maxTokens}, TTL: 2hrs&quot;;
            }</value>
        </set-header>
    </outbound>
    
    <on-error>
        <base />
        
        <!-- Headers de error específicos para completions -->
        <set-header name="X-Error-Message" exists-action="override">
            <value>@(context.LastError?.Message ?? &quot;Unknown error&quot;)</value>
        </set-header>
        
        <set-header name="X-Error-Source" exists-action="override">
            <value>@(context.LastError?.Source ?? &quot;Unknown&quot;)</value>
        </set-header>
        
        <set-header name="X-Error-Model" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault(&quot;model&quot;, &quot;unknown&quot;))</value>
        </set-header>
        
        <set-header name="X-Error-Temperature" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault(&quot;temperature&quot;, &quot;unknown&quot;))</value>
        </set-header>
    </on-error>
</policies>
