<policies>
    <!-- ════════════ INBOUND ════════════ -->
    <inbound>
        <base />
        <!-- 1. Parsear el cuerpo JSON -->
        <set-variable name="requestBody" value="@(context.Request.Body.As<JObject>(preserveContent:true))" />
        <!-- 2. Modelo solicitado -->
        <set-variable name="model" value="@{
            var body = (JObject)context.Variables["requestBody"];
            return (string)(body["model"] ?? "text-embedding-3-large");
        }" />
        <!-- 3. Deployment real -->
        <set-variable name="deployment-id" value="@{
            var m = (string)context.Variables["model"];
            if (m == "text-embedding-3-small") { return "text-embedding-3-small"; }
            if (m == "text-embedding-3-large") { return "text-embedding-3-large"; }
            if (m == "text-embedding-ada-002") { return "text-embedding-3-large"; }
            return m;
        }" />
        <!-- 4. Tipo de input -->
        <set-variable name="input-type" value="@{
            var body = (JObject)context.Variables["requestBody"];
            return (string)(body["input_type"] ?? "query");
        }" />
        <!-- 5. Dimensiones -->
        <set-variable name="dimensions" value="@{
            var body = (JObject)context.Variables["requestBody"];
            var dims = (string)body["dimensions"];
            if (dims == null) {
                dims = ((string)context.Variables["model"] == "text-embedding-3-large") ? "3072" : "1536";
            }
            return dims;
        }" />
        <!-- 6. ¿Es batch? -->
        <set-variable name="is-batch" value="@{
            var input = ((JObject)context.Variables["requestBody"])["input"];
            return input != null && input.Type == JTokenType.Array;
        }" />
        <!-- 7. Tamaño del batch -->
        <set-variable name="batch-size" value="@{
            var arr = ((JObject)context.Variables["requestBody"])["input"] as JArray;
            return arr != null ? arr.Count : 1;
        }" />
        <!-- 8. TTL adaptativo -->
        <set-variable name="cache-ttl" value="@{
            var t = (string)context.Variables["input-type"];
            if (t == "query") { return 3600; }
            if (t == "document") { return 604800; }
            if (t == "passage") { return 259200; }
            return 86400;
        }" />
        <!-- 9. Generar clave de caché -->
        <set-variable name="cache-key" value="@{
            var dep   = (string)context.Variables["deployment-id"];
            var mdl   = (string)context.Variables["model"];
            var typ   = (string)context.Variables["input-type"];
            var dim   = (string)context.Variables["dimensions"];
            var sub   = context.Subscription?.Id ?? "public";
            var body  = (JObject)context.Variables["requestBody"];
            var input = body["input"];

            string contentHash = "";
            if (input != null) {
                if (input.Type == JTokenType.String) {
                    contentHash = "single:" + input.ToString().GetHashCode();
                }
                else if (input.Type == JTokenType.Array) {
                    var arr = (JArray)input;
                    var hashes = new System.Text.StringBuilder();
                    foreach (var itm in arr) {
                        hashes.Append(itm.ToString().GetHashCode()).Append('|');
                    }
                    contentHash = "batch:" + arr.Count + ":" + hashes.ToString().GetHashCode();
                }
            }

            var meta = body["metadata"];
            var metaHash = meta != null ? ":meta:" + meta.ToString().GetHashCode() : "";

            return "emb:v2:" + dep + ":" + mdl + ":" + typ + ":" + dim + ":" + sub + ":" + contentHash + metaHash;
        }" />
        <!-- 10. Establecer flag inicial de cache status -->
        <set-variable name="cache-status" value="MISS" />
        <!-- 11. Búsqueda en caché -->
        <cache-lookup-value key="@((string)context.Variables["cache-key"])" variable-name="cached-response" />
        <!-- 12. Si hay HIT, devolver inmediatamente -->
        <choose>
            <when condition="@(context.Variables.ContainsKey("cached-response") && context.Variables["cached-response"] != null)">
                <set-variable name="cache-status" value="HIT" />
                <return-response>
                    <set-status code="200" reason="OK" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-header name="X-Cache-Status" exists-action="override">
                        <value>HIT</value>
                    </set-header>
                    <set-header name="X-Model-Version" exists-action="override">
                        <value>@((string)context.Variables["model"])</value>
                    </set-header>
                    <set-header name="X-Deployment-Used" exists-action="override">
                        <value>@((string)context.Variables["deployment-id"])</value>
                    </set-header>
                    <set-header name="X-Batch-Size" exists-action="override">
                        <value>@(((int)context.Variables["batch-size"]).ToString())</value>
                    </set-header>
                    <set-header name="X-Cache-Key" exists-action="override">
                        <value>@((string)context.Variables["cache-key"])</value>
                    </set-header>
                    <set-header name="X-Request-ID" exists-action="override">
                        <value>@(Guid.NewGuid().ToString())</value>
                    </set-header>
                    <set-body>@((string)context.Variables["cached-response"])</set-body>
                </return-response>
            </when>
        </choose>
        <!-- 13. Rate limiting -->
        <rate-limit-by-key calls="@(((bool)context.Variables["is-batch"]) ? 100 : 1000)" renewal-period="60" counter-key="@(context.Subscription?.Id ?? context.Request.IpAddress)" />
        <!-- 14. Identificador de solicitud -->
        <set-header name="X-Request-ID" exists-action="override">
            <value>@(Guid.NewGuid().ToString())</value>
        </set-header>
    </inbound>
    <!-- ════════════ BACKEND ════════════ -->
    <backend>
        <retry count="3" interval="2" max-interval="10" delta="2" condition="@(context.Response.StatusCode >= 500)">
            <forward-request buffer-request-body="true" timeout="30" />
        </retry>
    </backend>
    <!-- ════════════ OUTBOUND ════════════ -->
    <outbound>
        <base />
        <!-- 1. Almacenar solo respuestas 200 -->
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-variable name="response-body" value="@(context.Response.Body.As<string>(preserveContent:true))" />
                <cache-store-value key="@((string)context.Variables["cache-key"])" value="@((string)context.Variables["response-body"])" duration="@((int)context.Variables["cache-ttl"])" />
            </when>
        </choose>
        <!-- 2. Cabeceras diagnósticas -->
        <set-header name="X-Cache-Status" exists-action="override">
            <value>@((string)context.Variables["cache-status"])</value>
        </set-header>
        <set-header name="X-Model-Version" exists-action="override">
            <value>@((string)context.Variables["model"])</value>
        </set-header>
        <set-header name="X-Deployment-Used" exists-action="override">
            <value>@((string)context.Variables["deployment-id"])</value>
        </set-header>
        <set-header name="X-Batch-Size" exists-action="override">
            <value>@(((int)context.Variables["batch-size"]).ToString())</value>
        </set-header>
        <set-header name="X-Processing-Time-Ms" exists-action="override">
            <value>@(((int)context.Elapsed.TotalMilliseconds).ToString())</value>
        </set-header>
        <set-header name="X-Cache-Key" exists-action="override">
            <value>@((string)context.Variables["cache-key"])</value>
        </set-header>
        <set-header name="X-Cache-TTL" exists-action="override">
            <value>@(((int)context.Variables["cache-ttl"]).ToString())</value>
        </set-header>
    </outbound>
    <!-- ════════════ ON-ERROR ════════════ -->
    <on-error>
        <base />
        <return-response>
            <set-status code="@(context.Response?.StatusCode ?? 500)" reason="@(context.Response?.StatusReason ?? "Internal Server Error")" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                var err = new JObject(
                    new JProperty("error", new JObject(
                        new JProperty("code",    context.LastError?.Source  ?? "EMBEDDING_ERROR"),
                        new JProperty("message", context.LastError?.Message ?? "An unexpected error occurred"),
                        new JProperty("details", new JObject(
                            new JProperty("requestId", context.RequestId),
                            new JProperty("timestamp", DateTime.UtcNow.ToString("o"))
                        ))
                    ))
                );
                return err.ToString();
            }</set-body>
        </return-response>
    </on-error>
</policies>