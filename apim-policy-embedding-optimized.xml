<policies>
    <inbound>
        <base />
        
        <!-- Backend configuration -->
        <set-backend-service id="apim-generated-policy" backend-id="aoai-meli-openai-endpoint" />
        
        <!-- Detect operation type with embedding priority -->
        <set-variable name="operation-type" value="@{
            var path = context.Request.Url.Path;
            if (path.Contains(&quot;/embeddings&quot;)) { return &quot;embeddings&quot;; }
            if (path.Contains(&quot;/chat/completions&quot;)) { return &quot;chat&quot;; }
            if (path.Contains(&quot;/completions&quot;)) { return &quot;completions&quot;; }
            return &quot;other&quot;;
        }" />
        
        <!-- Extract request details for embedding optimization -->
        <set-variable name="requestBody" value="@(context.Request.Body.As<JObject>(preserveContent: true))" />
        
        <!-- For embeddings, extract additional metadata -->
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault("operation-type", "") == "embeddings")">
                <set-variable name="embedding-input-type" value="@{
                    var body = (JObject)context.Variables["requestBody"];
                    return body["input_type"]?.ToString() ?? "query";
                }" />
                <set-variable name="embedding-dimensions" value="@{
                    var body = (JObject)context.Variables["requestBody"];
                    // text-embedding-3-large default dimensions
                    return body["dimensions"]?.ToString() ?? "3072";
                }" />
                <set-variable name="embedding-encoding-format" value="@{
                    var body = (JObject)context.Variables["requestBody"];
                    return body["encoding_format"]?.ToString() ?? "float";
                }" />
            </when>
        </choose>
        
        <!-- EMBEDDING-OPTIMIZED Semantic Cache Lookup -->
        <!-- For embeddings: higher threshold (0.95+) since we want exact matches -->
        <!-- For other operations: lower threshold for semantic similarity -->
        <azure-openai-semantic-cache-lookup 
            score-threshold="@{
                var opType = context.Variables.GetValueOrDefault("operation-type", "other");
                switch(opType) {
                    case "embeddings": return "0.95";  // Very high for embeddings
                    case "chat": return "0.10";         // Low for chat
                    case "completions": return "0.15";  // Medium for completions
                    default: return "0.20";
                }
            }" 
            embeddings-backend-id="text-embedding-3-large" 
            embeddings-backend-auth="system-assigned" 
            max-message-count="10"
            ignore-system-messages="false">
            
            <!-- Primary partition by subscription -->
            <vary-by>@(context.Subscription?.Id ?? "anonymous")</vary-by>
            
            <!-- Partition by deployment -->
            <vary-by>@(context.Request.MatchedParameters["deployment-id"])</vary-by>
            
            <!-- Operation type partition -->
            <vary-by>@(context.Variables.GetValueOrDefault("operation-type", "other"))</vary-by>
            
            <!-- EMBEDDING-SPECIFIC partitioning -->
            <vary-by>@{
                var opType = context.Variables.GetValueOrDefault("operation-type", "other");
                
                if (opType == "embeddings") {
                    // For embeddings, create very specific cache keys
                    var inputType = context.Variables.GetValueOrDefault("embedding-input-type", "query");
                    var dimensions = context.Variables.GetValueOrDefault("embedding-dimensions", "3072");
                    var format = context.Variables.GetValueOrDefault("embedding-encoding-format", "float");
                    
                    // Include model version for embeddings
                    var body = (JObject)context.Variables["requestBody"];
                    var model = body["model"]?.ToString() ?? "text-embedding-3-large";
                    
                    return $"emb|model:{model}|type:{inputType}|dim:{dimensions}|fmt:{format}";
                }
                else if (opType == "chat" || opType == "completions") {
                    // Standard partitioning for text generation
                    var body = (JObject)context.Variables["requestBody"];
                    var temp = body["temperature"]?.Value<float>() ?? 0.7f;
                    var maxTokens = body["max_tokens"]?.Value<int>() ?? 100;
                    
                    string tempGroup = temp <= 0.2 ? "deterministic" : 
                                     temp <= 0.5 ? "low" : 
                                     temp <= 0.8 ? "medium" : "high";
                    
                    return $"{opType}|temp:{tempGroup}|tokens:{maxTokens}";
                }
                
                return $"{opType}|default";
            }</vary-by>
            
            <!-- User-specific caching for embeddings -->
            <vary-by>@{
                var body = (JObject)context.Variables["requestBody"];
                var user = body["user"]?.ToString();
                
                // For embeddings, also consider custom metadata
                if (context.Variables.GetValueOrDefault("operation-type", "") == "embeddings") {
                    var metadata = body["metadata"]?.ToString() ?? "";
                    if (!string.IsNullOrEmpty(metadata)) {
                        return $"user:{user ?? "public"}|meta:{metadata.GetHashCode()}";
                    }
                }
                
                return !string.IsNullOrEmpty(user) ? $"user:{user}" : "public";
            }</vary-by>
            
            <!-- For embeddings, also vary by input hash for exact matching -->
            <vary-by>@{
                if (context.Variables.GetValueOrDefault("operation-type", "") == "embeddings") {
                    var body = (JObject)context.Variables["requestBody"];
                    var input = body["input"];
                    
                    if (input != null) {
                        // Create a hash of the input for exact matching
                        var inputStr = input.ToString();
                        // Take first 100 chars for hash to avoid too long keys
                        var hashInput = inputStr.Length > 100 ? inputStr.Substring(0, 100) : inputStr;
                        return $"input-hash:{hashInput.GetHashCode()}";
                    }
                }
                return "";
            }</vary-by>
        </azure-openai-semantic-cache-lookup>
        
        <!-- Debug headers for embeddings -->
        <set-header name="X-Operation-Type" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault("operation-type", "unknown"))</value>
        </set-header>
        
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault("operation-type", "") == "embeddings")">
                <set-header name="X-Embedding-Type" exists-action="override">
                    <value>@(context.Variables.GetValueOrDefault("embedding-input-type", "unknown"))</value>
                </set-header>
                <set-header name="X-Embedding-Dimensions" exists-action="override">
                    <value>@(context.Variables.GetValueOrDefault("embedding-dimensions", "unknown"))</value>
                </set-header>
            </when>
        </choose>
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <base />
        
        <!-- Store successful responses with EMBEDDING-OPTIMIZED TTL -->
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <azure-openai-semantic-cache-store duration="@{
                    var opType = context.Variables.GetValueOrDefault("operation-type", "other");
                    
                    switch (opType)
                    {
                        case "embeddings":
                            // EMBEDDINGS: Very long cache duration (7 days)
                            // Embeddings are deterministic and don't change
                            var inputType = context.Variables.GetValueOrDefault("embedding-input-type", "query");
                            
                            // Even longer cache for document embeddings vs query embeddings
                            if (inputType == "document" || inputType == "passage") {
                                return "1209600"; // 14 days for document embeddings
                            }
                            return "604800"; // 7 days for query embeddings
                            
                        case "chat":
                        case "completions":
                            // Standard TTL for text generation
                            var body = (JObject)context.Variables["requestBody"];
                            var temp = body["temperature"]?.Value<float>() ?? 0.7f;
                            
                            if (temp <= 0.2) return "43200";  // 12 hours
                            else if (temp <= 0.5) return "14400"; // 4 hours
                            else if (temp <= 0.8) return "7200";  // 2 hours
                            else return "3600"; // 1 hour
                            
                        default:
                            return "7200"; // 2 hours default
                    }
                }" />
            </when>
        </choose>
        
        <!-- Enhanced response headers -->
        <set-header name="X-Semantic-Cache-Status" exists-action="override">
            <value>@{
                var status = context.Variables.GetValueOrDefault("semantic-cache-lookup-status", "none");
                return status.ToString().ToUpper();
            }</value>
        </set-header>
        
        <set-header name="X-Semantic-Cache-Score" exists-action="override">
            <value>@{
                var status = context.Variables.GetValueOrDefault("semantic-cache-lookup-status", "none");
                if (status.ToString().ToLower() == "hit") {
                    var score = context.Variables.GetValueOrDefault("semantic-cache-lookup-score", "0");
                    return score.ToString();
                }
                return "N/A";
            }</value>
        </set-header>
        
        <set-header name="X-Cache-TTL-Hours" exists-action="override">
            <value>@{
                var opType = context.Variables.GetValueOrDefault("operation-type", "other");
                var ttlSeconds = 7200; // default
                
                switch (opType)
                {
                    case "embeddings":
                        var inputType = context.Variables.GetValueOrDefault("embedding-input-type", "query");
                        ttlSeconds = (inputType == "document" || inputType == "passage") ? 1209600 : 604800;
                        break;
                    case "chat":
                    case "completions":
                        var body = (JObject)context.Variables["requestBody"];
                        var temp = body["temperature"]?.Value<float>() ?? 0.7f;
                        if (temp <= 0.2) ttlSeconds = 43200;
                        else if (temp <= 0.5) ttlSeconds = 14400;
                        else if (temp <= 0.8) ttlSeconds = 7200;
                        else ttlSeconds = 3600;
                        break;
                }
                
                return (ttlSeconds / 3600).ToString();
            }</value>
        </set-header>
        
        <set-header name="X-Response-Time-Ms" exists-action="override">
            <value>@(context.Elapsed.TotalMilliseconds.ToString("F0"))</value>
        </set-header>
        
        <!-- Embedding-specific cache info -->
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault("operation-type", "") == "embeddings")">
                <set-header name="X-Embedding-Cache-Key" exists-action="override">
                    <value>@{
                        var inputType = context.Variables.GetValueOrDefault("embedding-input-type", "query");
                        var dimensions = context.Variables.GetValueOrDefault("embedding-dimensions", "3072");
                        var deployment = context.Request.MatchedParameters["deployment-id"];
                        return $"emb:{deployment}|type:{inputType}|dim:{dimensions}";
                    }</value>
                </set-header>
                
                <!-- Add cache recommendation header -->
                <set-header name="X-Cache-Recommendation" exists-action="override">
                    <value>@{
                        var inputType = context.Variables.GetValueOrDefault("embedding-input-type", "query");
                        if (inputType == "document" || inputType == "passage") {
                            return "Consider pre-computing document embeddings during off-peak hours";
                        }
                        return "Query embeddings cached for 7 days";
                    }</value>
                </set-header>
            </when>
        </choose>
    </outbound>
    
    <on-error>
        <base />
        
        <set-header name="X-Error-Message" exists-action="override">
            <value>@(context.LastError?.Message ?? "Unknown error")</value>
        </set-header>
        
        <set-header name="X-Error-Operation" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault("operation-type", "unknown"))</value>
        </set-header>
    </on-error>
</policies>